import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable de.skycoder42.QtDataSync 4.1'

Module {
    dependencies: ["QtQuick 2.8"]
    Component { name: "QAbstractTableModel"; prototype: "QAbstractItemModel" }
    Component {
        name: "QtDataSync::AccountManager"
        prototype: "QObject"
        Property { name: "deviceName"; type: "string" }
        Property { name: "deviceFingerprint"; type: "QByteArray"; isReadonly: true }
        Property { name: "lastError"; type: "string"; isReadonly: true }
        Signal {
            name: "accountDevices"
            Parameter { name: "devices"; type: "QList<QtDataSync::DeviceInfo>" }
        }
        Signal {
            name: "loginRequested"
            Parameter { name: "request"; type: "QtDataSync::LoginRequest" }
        }
        Signal { name: "importAccepted" }
        Signal {
            name: "accountAccessGranted"
            Parameter { name: "deviceId"; type: "QUuid" }
        }
        Signal {
            name: "deviceNameChanged"
            Parameter { name: "deviceName"; type: "string" }
        }
        Signal {
            name: "deviceFingerprintChanged"
            Parameter { name: "deviceFingerprint"; type: "QByteArray" }
        }
        Signal {
            name: "lastErrorChanged"
            Parameter { name: "lastError"; type: "string" }
        }
        Method { name: "listDevices" }
        Method {
            name: "removeDevice"
            Parameter { name: "deviceInfo"; type: "QUuid" }
        }
        Method {
            name: "removeDevice"
            Parameter { name: "deviceInfo"; type: "QtDataSync::DeviceInfo" }
        }
        Method {
            name: "resetAccount"
            Parameter { name: "keepData"; type: "bool" }
        }
        Method { name: "resetAccount" }
        Method {
            name: "changeRemote"
            Parameter { name: "config"; type: "RemoteConfig" }
            Parameter { name: "keepData"; type: "bool" }
        }
        Method {
            name: "changeRemote"
            Parameter { name: "config"; type: "RemoteConfig" }
        }
        Method { name: "updateExchangeKey" }
        Method {
            name: "setDeviceName"
            Parameter { name: "deviceName"; type: "string" }
        }
        Method { name: "resetDeviceName" }
        Method { name: "replica"; type: "QRemoteObjectReplica*" }
    }
    Component {
        name: "QtDataSync::DataStore"
        prototype: "QObject"
        Enum {
            name: "SearchMode"
            values: {
                "RegexpMode": 0,
                "WildcardMode": 1,
                "ContainsMode": 2,
                "StartsWithMode": 3,
                "EndsWithMode": 4
            }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "metaTypeId"; type: "int" }
            Parameter { name: "key"; type: "string" }
            Parameter { name: "deleted"; type: "bool" }
        }
        Signal {
            name: "dataCleared"
            Parameter { name: "metaTypeId"; type: "int" }
        }
        Signal { name: "dataResetted" }
    }
    Component {
        name: "QtDataSync::DataStoreModel"
        prototype: "QAbstractTableModel"
        Property { name: "typeId"; type: "int" }
        Property { name: "editable"; type: "bool" }
        Signal {
            name: "storeError"
            Parameter { name: "exception"; type: "QException" }
        }
        Signal {
            name: "typeIdChanged"
            Parameter { name: "typeId"; type: "int" }
        }
        Signal {
            name: "editableChanged"
            Parameter { name: "editable"; type: "bool" }
        }
        Method {
            name: "setTypeId"
            Parameter { name: "typeId"; type: "int" }
        }
        Method {
            name: "setTypeId"
            Parameter { name: "typeId"; type: "int" }
            Parameter { name: "resetColumns"; type: "bool" }
        }
        Method {
            name: "setEditable"
            Parameter { name: "editable"; type: "bool" }
        }
        Method { name: "reload" }
        Method {
            name: "idIndex"
            type: "QModelIndex"
            Parameter { name: "id"; type: "string" }
        }
        Method {
            name: "key"
            type: "string"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "object"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "loadObject"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
        }
    }
    Component {
        name: "QtDataSync::DeviceInfo"
        exports: ["de.skycoder42.QtDataSync/DeviceInfo 4.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "deviceId"; type: "QUuid" }
        Property { name: "name"; type: "string" }
        Property { name: "fingerprint"; type: "QByteArray" }
    }
    Component {
        name: "QtDataSync::LoginRequest"
        exports: ["de.skycoder42.QtDataSync/LoginRequest 4.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "device"; type: "QtDataSync::DeviceInfo"; isReadonly: true }
        Property { name: "handled"; type: "bool"; isReadonly: true }
        Method { name: "accept" }
        Method { name: "reject" }
    }
    Component {
        name: "QtDataSync::QQmlAccountManager"
        prototype: "QtDataSync::AccountManager"
        exports: ["de.skycoder42.QtDataSync/AccountManager 4.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "setupName"; type: "string" }
        Property { name: "node"; type: "QRemoteObjectNode"; isPointer: true }
        Property { name: "valid"; type: "bool"; isReadonly: true }
        Signal {
            name: "setupNameChanged"
            Parameter { name: "setupName"; type: "string" }
        }
        Signal {
            name: "nodeChanged"
            Parameter { name: "node"; type: "QRemoteObjectNode"; isPointer: true }
        }
        Signal {
            name: "validChanged"
            Parameter { name: "valid"; type: "bool" }
        }
        Method {
            name: "setSetupName"
            Parameter { name: "setupName"; type: "string" }
        }
        Method {
            name: "setNode"
            Parameter { name: "node"; type: "QRemoteObjectNode"; isPointer: true }
        }
        Method {
            name: "isTrustedImport"
            type: "bool"
            Parameter { name: "importData"; type: "QJsonObject" }
        }
        Method {
            name: "exportAccount"
            Parameter { name: "includeServer"; type: "bool" }
            Parameter { name: "completedFn"; type: "QJSValue" }
            Parameter { name: "errorFn"; type: "QJSValue" }
        }
        Method {
            name: "exportAccount"
            Parameter { name: "includeServer"; type: "bool" }
            Parameter { name: "completedFn"; type: "QJSValue" }
        }
        Method {
            name: "exportAccountTrusted"
            Parameter { name: "includeServer"; type: "bool" }
            Parameter { name: "password"; type: "string" }
            Parameter { name: "completedFn"; type: "QJSValue" }
            Parameter { name: "errorFn"; type: "QJSValue" }
        }
        Method {
            name: "exportAccountTrusted"
            Parameter { name: "includeServer"; type: "bool" }
            Parameter { name: "password"; type: "string" }
            Parameter { name: "completedFn"; type: "QJSValue" }
        }
        Method {
            name: "importAccount"
            Parameter { name: "importData"; type: "QJsonObject" }
            Parameter { name: "completedFn"; type: "QJSValue" }
            Parameter { name: "keepData"; type: "bool" }
        }
        Method {
            name: "importAccount"
            Parameter { name: "importData"; type: "QJsonObject" }
            Parameter { name: "completedFn"; type: "QJSValue" }
        }
        Method {
            name: "importAccountTrusted"
            Parameter { name: "importData"; type: "QJsonObject" }
            Parameter { name: "password"; type: "string" }
            Parameter { name: "completedFn"; type: "QJSValue" }
            Parameter { name: "keepData"; type: "bool" }
        }
        Method {
            name: "importAccountTrusted"
            Parameter { name: "importData"; type: "QJsonObject" }
            Parameter { name: "password"; type: "string" }
            Parameter { name: "completedFn"; type: "QJSValue" }
        }
    }
    Component {
        name: "QtDataSync::QQmlDataStore"
        prototype: "QtDataSync::DataStore"
        exports: ["de.skycoder42.QtDataSync/DataStore 4.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "setupName"; type: "string" }
        Property { name: "valid"; type: "bool"; isReadonly: true }
        Signal {
            name: "setupNameChanged"
            Parameter { name: "setupName"; type: "string" }
        }
        Signal {
            name: "validChanged"
            Parameter { name: "valid"; type: "bool" }
        }
        Method {
            name: "setSetupName"
            Parameter { name: "setupName"; type: "string" }
        }
        Method {
            name: "count"
            type: "qlonglong"
            Parameter { name: "typeName"; type: "string" }
        }
        Method {
            name: "keys"
            type: "QStringList"
            Parameter { name: "typeName"; type: "string" }
        }
        Method {
            name: "loadAll"
            type: "QVariantList"
            Parameter { name: "typeName"; type: "string" }
        }
        Method {
            name: "load"
            type: "QVariant"
            Parameter { name: "typeName"; type: "string" }
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "save"
            Parameter { name: "typeName"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "typeName"; type: "string" }
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "search"
            type: "QVariantList"
            Parameter { name: "typeName"; type: "string" }
            Parameter { name: "query"; type: "string" }
            Parameter { name: "mode"; type: "DataStore::SearchMode" }
        }
        Method {
            name: "search"
            type: "QVariantList"
            Parameter { name: "typeName"; type: "string" }
            Parameter { name: "query"; type: "string" }
        }
        Method {
            name: "clear"
            Parameter { name: "typeName"; type: "string" }
        }
        Method {
            name: "typeName"
            type: "string"
            Parameter { name: "typeId"; type: "int" }
        }
    }
    Component {
        name: "QtDataSync::QQmlDataStoreModel"
        prototype: "QtDataSync::DataStoreModel"
        exports: ["de.skycoder42.QtDataSync/DataStoreModel 4.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "setupName"; type: "string" }
        Property { name: "dataStore"; type: "QQmlDataStore"; isPointer: true }
        Property { name: "valid"; type: "bool"; isReadonly: true }
        Property { name: "typeName"; type: "string" }
        Signal {
            name: "setupNameChanged"
            Parameter { name: "setupName"; type: "string" }
        }
        Signal {
            name: "dataStoreChanged"
            Parameter { name: "dataStore"; type: "QQmlDataStore"; isPointer: true }
        }
        Signal {
            name: "validChanged"
            Parameter { name: "valid"; type: "bool" }
        }
        Signal {
            name: "typeNameChanged"
            Parameter { name: "typeName"; type: "string" }
        }
        Method {
            name: "setSetupName"
            Parameter { name: "setupName"; type: "string" }
        }
        Method {
            name: "setDataStore"
            Parameter { name: "dataStore"; type: "QQmlDataStore"; isPointer: true }
        }
        Method {
            name: "setTypeName"
            Parameter { name: "typeName"; type: "string" }
        }
    }
    Component {
        name: "QtDataSync::QQmlSyncManager"
        prototype: "QtDataSync::SyncManager"
        exports: ["de.skycoder42.QtDataSync/SyncManager 4.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "setupName"; type: "string" }
        Property { name: "node"; type: "QRemoteObjectNode"; isPointer: true }
        Property { name: "valid"; type: "bool"; isReadonly: true }
        Signal {
            name: "setupNameChanged"
            Parameter { name: "setupName"; type: "string" }
        }
        Signal {
            name: "nodeChanged"
            Parameter { name: "node"; type: "QRemoteObjectNode"; isPointer: true }
        }
        Signal {
            name: "validChanged"
            Parameter { name: "valid"; type: "bool" }
        }
        Method {
            name: "setSetupName"
            Parameter { name: "setupName"; type: "string" }
        }
        Method {
            name: "setNode"
            Parameter { name: "node"; type: "QRemoteObjectNode"; isPointer: true }
        }
        Method {
            name: "runOnDownloaded"
            Parameter { name: "resultFn"; type: "QJSValue" }
            Parameter { name: "triggerSync"; type: "bool" }
        }
        Method {
            name: "runOnDownloaded"
            Parameter { name: "resultFn"; type: "QJSValue" }
        }
        Method {
            name: "runOnSynchronized"
            Parameter { name: "resultFn"; type: "QJSValue" }
            Parameter { name: "triggerSync"; type: "bool" }
        }
        Method {
            name: "runOnSynchronized"
            Parameter { name: "resultFn"; type: "QJSValue" }
        }
    }
    Component {
        name: "QtDataSync::QQmlUserExchangeManager"
        prototype: "QtDataSync::UserExchangeManager"
        exports: ["de.skycoder42.QtDataSync/UserExchangeManager 4.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "DataExchangePort"; type: "ushort"; isReadonly: true }
        Property { name: "setupName"; type: "string" }
        Property { name: "manager"; type: "QQmlAccountManager"; isPointer: true }
        Property { name: "valid"; type: "bool"; isReadonly: true }
        Signal {
            name: "setupNameChanged"
            Parameter { name: "setupName"; type: "string" }
        }
        Signal {
            name: "managerChanged"
            Parameter { name: "manager"; type: "QQmlAccountManager"; isPointer: true }
        }
        Signal {
            name: "validChanged"
            Parameter { name: "valid"; type: "bool" }
        }
        Method {
            name: "setSetupName"
            Parameter { name: "setupName"; type: "string" }
        }
        Method {
            name: "setManager"
            Parameter { name: "manager"; type: "QQmlAccountManager"; isPointer: true }
        }
        Method {
            name: "importFrom"
            Parameter { name: "userInfo"; type: "QtDataSync::UserInfo" }
            Parameter { name: "completedFn"; type: "QJSValue" }
            Parameter { name: "keepData"; type: "bool" }
        }
        Method {
            name: "importFrom"
            Parameter { name: "userInfo"; type: "QtDataSync::UserInfo" }
            Parameter { name: "completedFn"; type: "QJSValue" }
        }
        Method {
            name: "importTrustedFrom"
            Parameter { name: "userInfo"; type: "QtDataSync::UserInfo" }
            Parameter { name: "password"; type: "string" }
            Parameter { name: "completedFn"; type: "QJSValue" }
            Parameter { name: "keepData"; type: "bool" }
        }
        Method {
            name: "importTrustedFrom"
            Parameter { name: "userInfo"; type: "QtDataSync::UserInfo" }
            Parameter { name: "password"; type: "string" }
            Parameter { name: "completedFn"; type: "QJSValue" }
        }
    }
    Component {
        name: "QtDataSync::SyncManager"
        prototype: "QObject"
        Enum {
            name: "SyncState"
            values: {
                "Initializing": 0,
                "Downloading": 1,
                "Uploading": 2,
                "Synchronized": 3,
                "Error": 4,
                "Disconnected": 5
            }
        }
        Property { name: "syncEnabled"; type: "bool" }
        Property { name: "syncState"; type: "SyncState"; isReadonly: true }
        Property { name: "syncProgress"; type: "double"; isReadonly: true }
        Property { name: "lastError"; type: "string"; isReadonly: true }
        Signal {
            name: "syncEnabledChanged"
            Parameter { name: "syncEnabled"; type: "bool" }
        }
        Signal {
            name: "syncStateChanged"
            Parameter { name: "syncState"; type: "QtDataSync::SyncManager::SyncState" }
        }
        Signal {
            name: "syncProgressChanged"
            Parameter { name: "syncProgress"; type: "double" }
        }
        Signal {
            name: "lastErrorChanged"
            Parameter { name: "lastError"; type: "string" }
        }
        Method {
            name: "setSyncEnabled"
            Parameter { name: "syncEnabled"; type: "bool" }
        }
        Method { name: "synchronize" }
        Method { name: "reconnect" }
        Method { name: "replica"; type: "QRemoteObjectReplica*" }
    }
    Component {
        name: "QtDataSync::UserExchangeManager"
        prototype: "QObject"
        Property { name: "active"; type: "bool"; isReadonly: true }
        Property { name: "devices"; type: "QList<QtDataSync::UserInfo>"; isReadonly: true }
        Signal {
            name: "userDataReceived"
            Parameter { name: "userInfo"; type: "QtDataSync::UserInfo" }
            Parameter { name: "trusted"; type: "bool" }
        }
        Signal {
            name: "exchangeError"
            Parameter { name: "errorString"; type: "string" }
        }
        Signal {
            name: "activeChanged"
            Parameter { name: "active"; type: "bool" }
        }
        Signal {
            name: "devicesChanged"
            Parameter { name: "devices"; type: "QList<QtDataSync::UserInfo>" }
        }
        Method {
            name: "startExchange"
            type: "bool"
            Parameter { name: "port"; type: "ushort" }
        }
        Method { name: "startExchange"; type: "bool" }
        Method {
            name: "startExchange"
            type: "bool"
            Parameter { name: "listenAddress"; type: "QHostAddress" }
            Parameter { name: "port"; type: "ushort" }
        }
        Method {
            name: "startExchange"
            type: "bool"
            Parameter { name: "listenAddress"; type: "QHostAddress" }
        }
        Method { name: "stopExchange" }
        Method {
            name: "exportTo"
            Parameter { name: "userInfo"; type: "QtDataSync::UserInfo" }
            Parameter { name: "includeServer"; type: "bool" }
        }
        Method {
            name: "exportTrustedTo"
            Parameter { name: "userInfo"; type: "QtDataSync::UserInfo" }
            Parameter { name: "includeServer"; type: "bool" }
            Parameter { name: "password"; type: "string" }
        }
    }
    Component {
        name: "QtDataSync::UserInfo"
        exports: ["de.skycoder42.QtDataSync/UserInfo 4.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "address"; type: "QHostAddress"; isReadonly: true }
        Property { name: "port"; type: "ushort"; isReadonly: true }
    }
}
