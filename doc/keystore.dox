/*!
@class QtDataSync::KeyStore

The datasync library makes use of keystores to securely store secret encryption keys. Since
there are many different stores on all platforms, the stores are provided via plugins. If you
want to create your own store, you can create a custom KeyStorePlugin and implement this class
to give the library access to the keystore.

The following keystores are already support via a plugin that is part of the Library:
- KWallet (KDE only)
- SecretService (based on the gnome library, works with any keystore that implements it.
Currently known:)
	- gnome-keyring
- Windows Credentials store (Desktop windows only)
- Android Shared Preferences (Not completly secure, Android only)
- Apple Keychain (macOs and iOs only)
- Plain (An **unsecure** fallback implementation that works on any platform)

@note All methods must be synchronous. The keystore is only used from within an extra thread,
and thus will not block the UI. It is save to wait for asynchronos operations within your
methods

@sa KeyStorePlugin
*/

/*!
@fn QtDataSync::KeyStore::setupName

@returns The name of the setup

@sa QtDataSync::Setup
*/

/*!
@fn QtDataSync::KeyStore::providerName

@return The name of the provide the store represents

@note This *must* be the same that was used to construct the keystore with via
KeyStorePlugin::createInstance

@sa KeyStorePlugin::createInstance
*/

/*!
@fn QtDataSync::KeyStore::isOpen

@return `true` if the store is open, `false` if not
@throws KeyStoreException In case an internal error occured

A store should be closed after it's creation. If an error occures while checking you can throw
an exception, but you should prefer to simply return `false` instead.

@sa KeyStore::openStore, KeyStore::closeStore
*/

/*!
@fn QtDataSync::KeyStore::openStore

@throws KeyStoreException If the store could not be successfully opened

If this method returns without an exception, the store must be open and isOpen() must return
`true`. If anything goes wrong that prevents the store from beeing opened, throw an exception.
If the store is already open, simply return without doing anything.

@sa KeyStore::isOpen, KeyStore::closeStore
*/

/*!
@fn QtDataSync::KeyStore::closeStore

@throws KeyStoreException If the store could not be successfully closed

If this method returns without an exception, the store must be closed and isOpen() must return
`false`. If anything goes wrong that prevents the store from beeing closed, throw an exception.
If the store is not open to begin with, simply return without doing anything.

@sa KeyStore::isOpen, KeyStore::openStore
*/

/*!
@fn QtDataSync::KeyStore::contains

@param key The identifier of the key that is checked for existance
@returns `true` if a key with that id exists in the store, `false` if not
@throws KeyStoreException If the store is not open, or something went wrong checking the
existance

@sa KeyStore::load
*/

/*!
@fn QtDataSync::KeyStore::save

@param key The identifier of the key that is beeing stored
@param pKey The secrect cryptographic key to be stored
@throws KeyStoreException If the store is not open, or the store failed to save the key

If a key with the same name already exists, it should simply be overwritten. If this method
returns without an exception, it is assumed that the key was successfully stored and contains()
must return `true` now. Also, load with the same key should work.

@sa KeyStore::load, KeyStore::remove, KeyStore::contains
*/

/*!
@fn QtDataSync::KeyStore::load

@param key The identifier of the key to be loaded
@returns The secrect cryptographic key stored under that id
@throws KeyStoreException If the store is not open, or the store failed to load the key

If the key does not exist, simply throw an exception as well. Whatever is returned from this
method is assumed to be a valid key.

@sa KeyStore::save, KeyStore::remove, KeyStore::contains
*/

/*!
@fn QtDataSync::KeyStore::remove

@param key The identifier of the key to be removed
@throws KeyStoreException If the store is not open, or the store failed to remove the key

If this method returns without an exception, it is assumed that the key was successfully removed
from the store. If it did not exist to begin with, simply return without doing anything.

@sa KeyStore::save
*/



/*!
@class QtDataSync::KeyStorePlugin

The plugin that must be implemented to create a KeyStore plugin. The plugins IID is
#QtDataSync_KeyStorePlugin_Iid. The plugin most have a json file with the following layout:

@code{.json}
{
	"Keys" : [ "provider1", "provder2", ... ]
}
@endcode

Each string in the `Keys` array is the name of a kind of keystore that is provided from that
plugin. Most plugins provide onyl one type of keystore, so for most cases you have only 1
element in the list. Please note that the plugin must be able to handle all these providers when
passed to it's methods.

For more details on how to implement such a plugin, have a look at:
[The High-Level API: Writing Qt Extensions](https://doc.qt.io/qt-5/plugins-howto.html#the-high-level-api-writing-qt-extensions)

@sa KeyStore
*/

/*!
@fn QtDataSync::KeyStorePlugin::keystoreAvailable

@param provider The provider type the check
@returns `true` if the keystore backend for the given provider is available, `false` if not.

<b>This method must be threadsafe</b>

This method should check if the given keystore is accessible, i.e. if the user has enabled it.
If a keystore is available, it should be possible to open and use it without any errors
(assuming the user allows access for keystores that have it). The providers passed to this
method are the ones defined in the json file.

@sa KeyStorePlugin::createInstance
*/

/*!
@fn QtDataSync::KeyStorePlugin::createInstance

@param provider The type of keystore to be created
@param defaults The defaults of the current datasync instance. Shoudl be passed to the keystore
constructor
@param parent The parent for the keystore. Should be set as the QObject::parent of the newly
created keystore
@returns A newly created keystore instance for the given provider.

<b>This method must be threadsafe</b>

After the availablility of a provider has been checked via keystoreAvailable(), this method is
called to actually create an instance. You should always return a valid keystore for all valid
providers, and don't need to perform additional validity checks. It is save to return `nullptr`
in case the store cannot be created. The providers passed to this method are the ones defined
in the json file.

@sa KeyStorePlugin::keystoreAvailable, KeyStore::KeyStore()
*/
