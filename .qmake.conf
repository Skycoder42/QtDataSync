load(qt_build_config)

CPP_VERSION = c++17
CONFIG += warning_clean exceptions $$CPP_VERSION
DEFINES += QT_DEPRECATED_WARNINGS QT_ASCII_CAST_WARNINGS

QRESTBUILDER_DIR = .rest
QSCXMLC_DIR = .scxml

MODULE_VERSION_MAJOR = 5
MODULE_VERSION_MINOR = 0
MODULE_VERSION_PATCH = 0
MODULE_VERSION_IMPORT = $${MODULE_VERSION_MAJOR}.$${MODULE_VERSION_MINOR}
MODULE_VERSION = $${MODULE_VERSION_MAJOR}.$${MODULE_VERSION_MINOR}.$${MODULE_VERSION_PATCH}

LOGGING_RULES = qt.datasync.*.debug=true

# Added in 5.14 - check if still needed!
QMAKE_MACOSX_DEPLOYMENT_TARGET = 10.14
QMAKE_IOS_DEPLOYMENT_TARGET = 12.0

# check test keys
defineReplace(envDefine) {
	_define = "$$1=\\\"$${LITERAL_DOLLAR}($$1)\\\""
	return($$_define)
}

# cryptopp detection
isEmpty(QTDATASYNC_CRYPTOPP): QTDATASYNC_CRYPTOPP = helper
isEmpty(QTDATASYNC_CRYPTOPP_PC): QTDATASYNC_CRYPTOPP_PC = libcrypto++

defineTest(loadCryptopp) {
	equals(QTDATASYNC_CRYPTOPP, helper) {
		QMAKE_USE_PRIVATE += cryptopp
		export(QMAKE_USE_PRIVATE): return(true)
		else: return(false)
	} else {
		CONFIG *= link_pkgconfig
		PKGCONFIG += $$QTDATASYNC_CRYPTOPP_PC
		packagesExist($$QTDATASYNC_CRYPTOPP_PC): \
			export(CONFIG): \
			export(PKGCONFIG): \
			return(true)
		else: return(false)
	}
}
